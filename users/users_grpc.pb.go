// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersInfoClient is the client API for UsersInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersInfoClient interface {
	//添加用户
	CreateUsers(ctx context.Context, in *Users, opts ...grpc.CallOption) (*UsersId, error)
	//批量添加用户
	BatchCreateUsers(ctx context.Context, in *BatchCreateUsersParams, opts ...grpc.CallOption) (*BatchCreateUsersCount, error)
	//用户充值
	Recharge(ctx context.Context, in *RechargeParams, opts ...grpc.CallOption) (*UsersSuccess, error)
	//冻结余额try
	FrozenAmountTry(ctx context.Context, in *FrozenTryParams, opts ...grpc.CallOption) (*FrozenTryResp, error)
	//冻结余额cancel
	FrozenAmountCancel(ctx context.Context, in *FrozenCancelParams, opts ...grpc.CallOption) (*FrozenCancelResp, error)
	//冻结余额commit
	FrozenAmountCommit(ctx context.Context, in *FrozenCommitParams, opts ...grpc.CallOption) (*FrozenCommitResp, error)
}

type usersInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersInfoClient(cc grpc.ClientConnInterface) UsersInfoClient {
	return &usersInfoClient{cc}
}

func (c *usersInfoClient) CreateUsers(ctx context.Context, in *Users, opts ...grpc.CallOption) (*UsersId, error) {
	out := new(UsersId)
	err := c.cc.Invoke(ctx, "/UsersInfo/createUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersInfoClient) BatchCreateUsers(ctx context.Context, in *BatchCreateUsersParams, opts ...grpc.CallOption) (*BatchCreateUsersCount, error) {
	out := new(BatchCreateUsersCount)
	err := c.cc.Invoke(ctx, "/UsersInfo/batchCreateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersInfoClient) Recharge(ctx context.Context, in *RechargeParams, opts ...grpc.CallOption) (*UsersSuccess, error) {
	out := new(UsersSuccess)
	err := c.cc.Invoke(ctx, "/UsersInfo/recharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersInfoClient) FrozenAmountTry(ctx context.Context, in *FrozenTryParams, opts ...grpc.CallOption) (*FrozenTryResp, error) {
	out := new(FrozenTryResp)
	err := c.cc.Invoke(ctx, "/UsersInfo/frozenAmountTry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersInfoClient) FrozenAmountCancel(ctx context.Context, in *FrozenCancelParams, opts ...grpc.CallOption) (*FrozenCancelResp, error) {
	out := new(FrozenCancelResp)
	err := c.cc.Invoke(ctx, "/UsersInfo/frozenAmountCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersInfoClient) FrozenAmountCommit(ctx context.Context, in *FrozenCommitParams, opts ...grpc.CallOption) (*FrozenCommitResp, error) {
	out := new(FrozenCommitResp)
	err := c.cc.Invoke(ctx, "/UsersInfo/frozenAmountCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersInfoServer is the server API for UsersInfo service.
// All implementations must embed UnimplementedUsersInfoServer
// for forward compatibility
type UsersInfoServer interface {
	//添加用户
	CreateUsers(context.Context, *Users) (*UsersId, error)
	//批量添加用户
	BatchCreateUsers(context.Context, *BatchCreateUsersParams) (*BatchCreateUsersCount, error)
	//用户充值
	Recharge(context.Context, *RechargeParams) (*UsersSuccess, error)
	//冻结余额try
	FrozenAmountTry(context.Context, *FrozenTryParams) (*FrozenTryResp, error)
	//冻结余额cancel
	FrozenAmountCancel(context.Context, *FrozenCancelParams) (*FrozenCancelResp, error)
	//冻结余额commit
	FrozenAmountCommit(context.Context, *FrozenCommitParams) (*FrozenCommitResp, error)
	mustEmbedUnimplementedUsersInfoServer()
}

// UnimplementedUsersInfoServer must be embedded to have forward compatible implementations.
type UnimplementedUsersInfoServer struct {
}

func (UnimplementedUsersInfoServer) CreateUsers(context.Context, *Users) (*UsersId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsers not implemented")
}
func (UnimplementedUsersInfoServer) BatchCreateUsers(context.Context, *BatchCreateUsersParams) (*BatchCreateUsersCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateUsers not implemented")
}
func (UnimplementedUsersInfoServer) Recharge(context.Context, *RechargeParams) (*UsersSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (UnimplementedUsersInfoServer) FrozenAmountTry(context.Context, *FrozenTryParams) (*FrozenTryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenAmountTry not implemented")
}
func (UnimplementedUsersInfoServer) FrozenAmountCancel(context.Context, *FrozenCancelParams) (*FrozenCancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenAmountCancel not implemented")
}
func (UnimplementedUsersInfoServer) FrozenAmountCommit(context.Context, *FrozenCommitParams) (*FrozenCommitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenAmountCommit not implemented")
}
func (UnimplementedUsersInfoServer) mustEmbedUnimplementedUsersInfoServer() {}

// UnsafeUsersInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersInfoServer will
// result in compilation errors.
type UnsafeUsersInfoServer interface {
	mustEmbedUnimplementedUsersInfoServer()
}

func RegisterUsersInfoServer(s grpc.ServiceRegistrar, srv UsersInfoServer) {
	s.RegisterService(&UsersInfo_ServiceDesc, srv)
}

func _UsersInfo_CreateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Users)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).CreateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/createUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).CreateUsers(ctx, req.(*Users))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersInfo_BatchCreateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUsersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).BatchCreateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/batchCreateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).BatchCreateUsers(ctx, req.(*BatchCreateUsersParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersInfo_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/recharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).Recharge(ctx, req.(*RechargeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersInfo_FrozenAmountTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenTryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).FrozenAmountTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/frozenAmountTry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).FrozenAmountTry(ctx, req.(*FrozenTryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersInfo_FrozenAmountCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenCancelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).FrozenAmountCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/frozenAmountCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).FrozenAmountCancel(ctx, req.(*FrozenCancelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersInfo_FrozenAmountCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenCommitParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersInfoServer).FrozenAmountCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersInfo/frozenAmountCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersInfoServer).FrozenAmountCommit(ctx, req.(*FrozenCommitParams))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersInfo_ServiceDesc is the grpc.ServiceDesc for UsersInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersInfo",
	HandlerType: (*UsersInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUsers",
			Handler:    _UsersInfo_CreateUsers_Handler,
		},
		{
			MethodName: "batchCreateUsers",
			Handler:    _UsersInfo_BatchCreateUsers_Handler,
		},
		{
			MethodName: "recharge",
			Handler:    _UsersInfo_Recharge_Handler,
		},
		{
			MethodName: "frozenAmountTry",
			Handler:    _UsersInfo_FrozenAmountTry_Handler,
		},
		{
			MethodName: "frozenAmountCancel",
			Handler:    _UsersInfo_FrozenAmountCancel_Handler,
		},
		{
			MethodName: "frozenAmountCommit",
			Handler:    _UsersInfo_FrozenAmountCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users/users.proto",
}
