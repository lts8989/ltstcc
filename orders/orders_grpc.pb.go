// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersInfoClient is the client API for OrdersInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersInfoClient interface {
	//下单
	CreateOrder(ctx context.Context, in *CreateOrderParams, opts ...grpc.CallOption) (*CreateOrderResp, error)
	//下单取消
	CreateOrderCancel(ctx context.Context, in *CreateOrderCancelParams, opts ...grpc.CallOption) (*OrdersSuccess, error)
}

type ordersInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersInfoClient(cc grpc.ClientConnInterface) OrdersInfoClient {
	return &ordersInfoClient{cc}
}

func (c *ordersInfoClient) CreateOrder(ctx context.Context, in *CreateOrderParams, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, "/OrdersInfo/createOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersInfoClient) CreateOrderCancel(ctx context.Context, in *CreateOrderCancelParams, opts ...grpc.CallOption) (*OrdersSuccess, error) {
	out := new(OrdersSuccess)
	err := c.cc.Invoke(ctx, "/OrdersInfo/createOrderCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersInfoServer is the server API for OrdersInfo service.
// All implementations must embed UnimplementedOrdersInfoServer
// for forward compatibility
type OrdersInfoServer interface {
	//下单
	CreateOrder(context.Context, *CreateOrderParams) (*CreateOrderResp, error)
	//下单取消
	CreateOrderCancel(context.Context, *CreateOrderCancelParams) (*OrdersSuccess, error)
	mustEmbedUnimplementedOrdersInfoServer()
}

// UnimplementedOrdersInfoServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersInfoServer struct {
}

func (UnimplementedOrdersInfoServer) CreateOrder(context.Context, *CreateOrderParams) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrdersInfoServer) CreateOrderCancel(context.Context, *CreateOrderCancelParams) (*OrdersSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderCancel not implemented")
}
func (UnimplementedOrdersInfoServer) mustEmbedUnimplementedOrdersInfoServer() {}

// UnsafeOrdersInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersInfoServer will
// result in compilation errors.
type UnsafeOrdersInfoServer interface {
	mustEmbedUnimplementedOrdersInfoServer()
}

func RegisterOrdersInfoServer(s grpc.ServiceRegistrar, srv OrdersInfoServer) {
	s.RegisterService(&OrdersInfo_ServiceDesc, srv)
}

func _OrdersInfo_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersInfoServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersInfo/createOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersInfoServer).CreateOrder(ctx, req.(*CreateOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersInfo_CreateOrderCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderCancelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersInfoServer).CreateOrderCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersInfo/createOrderCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersInfoServer).CreateOrderCancel(ctx, req.(*CreateOrderCancelParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersInfo_ServiceDesc is the grpc.ServiceDesc for OrdersInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrdersInfo",
	HandlerType: (*OrdersInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrder",
			Handler:    _OrdersInfo_CreateOrder_Handler,
		},
		{
			MethodName: "createOrderCancel",
			Handler:    _OrdersInfo_CreateOrderCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders/orders.proto",
}
